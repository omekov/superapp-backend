name: CICD

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  REGISTRY: "ghcr.io/omekov"
  IMAGE_NAME: "dubaicarkz"
  CONTAINER_NAME: "dubaicarkzn"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23'
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify dependencies
        run: go mod verify

      # - name: Run golang tests
      #   run: go test -v -cover -timeout 60s ./...
      
  
  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout docker
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the dubaicarkz microservice Docker image
        run: |
          docker build -f .Dockerfile . --tag $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
          docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.DEPLOY_SERVER }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,GITHUB_TOKEN
          script: |
            # Login GITHUB Registry
            sudo docker login -u ${{ secrets.GITHUB_TOKEN }} -p ${{ secrets.GITHUB_TOKEN }} $(echo $REGISTRY)
            #####
            ## dubaicar
            #####
            # Stop running container
            sudo docker stop $(echo $CONTAINER_NAME)
            # Remove old container
            sudo docker rm $(echo $CONTAINER_NAME)
            # Run a new container from a new image
            sudo docker pull $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
            # Run migration
            sudo docker run -d --name $(echo $CONTAINER_NAME) \
            -v /path/to/data.db:${{ secrets.SQLITE_PATH }} \
            -e SQLITE_PATH={{ secrets.SQLITE_PATH }} \
            -e FRONT_FILES_PATH={{ secrets.FRONT_FILES_PATH }} \
            -e HTTP_PORT={{ secrets.HTTP_PORT }} \
            -e KGD_URL={{ secrets.KGD_URL }} \
            -e OPEN_EXCHANGE_RATE_URL={{ secrets.OPEN_EXCHANGE_RATE_URL }} \
            -e TELEGRAM_API_TOKEN={{ secrets.TELEGRAM_API_TOKEN }} \
            --restart always \
            --network="host" \
            --publish 8080:8080 \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)